{"version":3,"sources":["utils/API.js","components/SearchBar.js","components/TableData.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchBar","props","className","onChange","handleInputChange","value","id","type","name","list","placeholder","onClick","handleSearch","class","aria-hidden","TableData","sortByName","results","map","result","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","format","dob","date","Main","state","search","employees","filteredEmployees","order","filtereds","sorteds","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","preventDefault","alert","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8b2c5b23.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React from \"react\";\r\nimport \"../style/search.css\";\r\n\r\nfunction SearchBar(props) {\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n\r\n\r\n            <header className=\"z-depth-3 col s12\" >\r\n                <div className=\"row\">\r\n                    <div className=\"col s6 \">\r\n                        <h1>Employee Directory</h1>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col s6 \">\r\n\r\n                        <div className=\"col s6 searchBar right-align \">\r\n\r\n                            <input\r\n                                onChange={props.handleInputChange}\r\n                                value={props.value}\r\n                                id=\"employees\"\r\n                                type=\"text\"\r\n                                name=\"search\"\r\n                                list=\"employee\"\r\n                                className=\" inputBox  \"\r\n                                placeholder=\"Search by name\" \r\n                            />\r\n                            <button\r\n                                type=\"submit\"\r\n                                value=\"\"\r\n                                className=\" btn z-depth-2 waves-effect  searchBttn\"\r\n                                onClick={props.handleSearch} ><i class=\"fa fa-search\" aria-hidden=\"true\"></i></button>\r\n\r\n                        </div>\r\n                    \r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React from \"react\";\r\nimport Moment from 'react-moment';\r\nimport \"../style/table.css\";\r\n\r\nfunction TableData(props) {\r\n    return (\r\n      <table className=\"tableEmployee \">\r\n          <thead>\r\n              <tr>\r\n                  <th></th>\r\n                  <th onClick={props.sortByName}>Name</th>\r\n                  <th>Phone</th>\r\n                  <th>E-mail</th>\r\n                  <th>DOB</th>\r\n              </tr>\r\n          </thead>\r\n\r\n          <tbody className= \"\">\r\n              {props.results.map(result => (\r\n                  <tr className=\"table\" key={result.login.uuid}>\r\n                   \r\n\r\n                      <td> <img className=\"\r\n                      \"src={result.picture.medium} alt=\"\" /></td>\r\n                      \r\n                      <td>{result.name.first + \" \" + result.name.last}  </td>\r\n\r\n                      <td>{result.cell}</td>\r\n                      <td className=\"email\"><a href={result.email}>{result.email}</a></td>\r\n                      <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\r\n\r\n                  </tr>\r\n              ))}\r\n          </tbody>\r\n      </table >\r\n  )\r\n}\r\n\r\n\r\nexport default TableData","import React, { Component } from \"react\"\r\nimport API from \"../utils/API\";\r\nimport SearchBar from \"./SearchBar\"\r\nimport TableData from \"./TableData\"\r\nimport \"../style/main.css\";\r\n\r\nclass Main extends Component {\r\n    //Empty strings that loads employees in that order while filtered\r\n    state = {\r\n        search: \"\",\r\n        employees: [],\r\n        filteredEmployees: [],\r\n        order: \"\"\r\n\r\n    };\r\n\r\n    // initial loading\r\n    componentDidMount() {\r\n        API.getUsers().then(res => this.setState({\r\n            employees: res.data.results,\r\n            filteredEmployees: res.data.results\r\n        })).catch(err => console.log(err))\r\n    }\r\n\r\n    //sort by Name aphabetically/reverse\r\n\r\n    sortByName = () => {\r\n        const filtereds = this.state.filteredEmployees;\r\n        if (this.state.order === \"asc\") {\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n            console.log(sorteds)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"desc\"\r\n            })\r\n        } else {\r\n\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\r\n            console.log(sorteds)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"asc\"\r\n            })\r\n\r\n        }\r\n    }\r\n    //filtering ppl as the name is being searched\r\n    handleInputChange = event => {\r\n\r\n        const employees = this.state.employees;\r\n        const UserInput = event.target.value;\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\r\n        )\r\n        this.setState({\r\n          //state changes results to filtered employees\r\n\r\n            filteredEmployees,\r\n\r\n        });\r\n\r\n\r\n    };\r\n\r\n\r\n    //API call when page is loaded\r\n    employeeSearch = () => {\r\n        API.getUsers()\r\n            .then(res => this.setState({\r\n                //to keep all employees even tho some are filtered to be viewed\r\n                filteredEmployees: res.data.results,\r\n                employees: res.data.results\r\n            }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    //when button search is clicked\r\n    handleSearch = event => {\r\n        event.preventDefault();\r\n        if (!this.state.search) {\r\n            alert(\"Enter a name\")\r\n        }\r\n        const { employees, search } = this.state;\r\n\r\n        //filters by searched item\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\r\n\r\n        this.setState({\r\n            filteredEmployees\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <SearchBar\r\n                    employee={this.state.employees}\r\n                    handleSearch={this.handleSearch}\r\n                    handleInputChange={this.handleInputChange} />\r\n                <TableData results={this.state.filteredEmployees}\r\n                    sortByName={this.sortByName}\r\n\r\n                />\r\n            </div >\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport Main from './components/Main';\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}